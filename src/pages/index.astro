---
import PageMeta from "../components/PageMeta.astro";
import StructuredData from "../components/StructuredData.astro";
import PageLayout from "../layouts/PageLayout.astro";
import Intro from "../components/Intro.astro";
import {
  SITE_TITLE,
  SITE_DESCRIPTION,
  SITE_URL,
  MY_NAME,
  TWITTER_HANDLE,
  GITHUB_URL,
  LINKEDIN_URL,
} from "../config";
import { readAll } from "../lib/markdoc/read";
import { blog } from "../lib/markdoc/frontmatter.schema";
import { getReadingTime } from "../lib/reading-time";

const posts = await readAll({
  directory: "blog",
  frontmatterSchema: blog,
});

const recentPosts = posts
  .filter((p) => p.frontmatter.draft !== true && !p.frontmatter.external)
  .sort(
    (a, b) =>
      new Date(b.frontmatter.date).valueOf() -
      new Date(a.frontmatter.date).valueOf(),
  )
  .slice(0, 3)
  .map((post) => {
    const { minutes } = getReadingTime(post.rawContent);
    return {
      slug: post.slug,
      frontmatter: {
        title: post.frontmatter.title,
        description: post.frontmatter.description,
        date: post.frontmatter.date,
      },
      minutes,
    };
  });

// Structured data for website
const websiteStructuredData = {
  "@context": "https://schema.org",
  "@type": "WebSite",
  name: SITE_TITLE,
  description: SITE_DESCRIPTION,
  url: SITE_URL,
  author: {
    "@type": "Person",
    "@id": `${SITE_URL}/#person`,
  },
};

// Structured data for person/author
const personStructuredData = {
  "@context": "https://schema.org",
  "@type": "Person",
  "@id": `${SITE_URL}/#person`,
  name: MY_NAME,
  url: SITE_URL,
  sameAs: [
    `https://twitter.com/${TWITTER_HANDLE.replace("@", "")}`,
    GITHUB_URL,
    LINKEDIN_URL,
  ],
};
---

<PageLayout>
  <PageMeta title={`${SITE_TITLE}`} slot="meta" />
  <StructuredData data={websiteStructuredData} slot="meta" />
  <StructuredData data={personStructuredData} slot="meta" />
  <Fragment slot="main">
    <Intro recentPosts={recentPosts} />
  </Fragment>
</PageLayout>
