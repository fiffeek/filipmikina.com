---
import { readAll } from "../../../lib/markdoc/read";
import { blog } from "../../../lib/markdoc/frontmatter.schema";
import PageLayout from "../../../layouts/PageLayout.astro";
import PageMeta from "../../../components/PageMeta.astro";
import BlogPostItem from "../../../components/BlogPostItem.astro";
import { SITE_TITLE } from "../../../config";
import { getReadingTime } from "../../../lib/reading-time";

export async function getStaticPaths() {
  const posts = await readAll({
    directory: "blog",
    frontmatterSchema: blog,
  });

  const filteredPosts = posts.filter((p) => p.frontmatter.draft !== true);

  const allTags = new Set<string>();
  filteredPosts.forEach((post) => {
    if (post.frontmatter.external === false && post.frontmatter.tags) {
      post.frontmatter.tags.forEach((tag: string) => allTags.add(tag));
    }
  });

  return Array.from(allTags).map((tag) => {
    return {
      params: { tag },
      props: { tag },
    };
  });
}

const { tag } = Astro.params;
if (typeof tag !== "string") {
  throw Error(`tag should be string. Received: ${tag}`);
}

const posts = await readAll({
  directory: "blog",
  frontmatterSchema: blog,
});

const taggedPosts = posts
  .filter((p) => p.frontmatter.draft !== true)
  .filter((p) => {
    if (p.frontmatter.external === false && p.frontmatter.tags) {
      return p.frontmatter.tags.includes(tag);
    }
    return false;
  })
  .sort(
    (a, b) =>
      new Date(b.frontmatter.date).valueOf() -
      new Date(a.frontmatter.date).valueOf(),
  );

const postsWithMeta = taggedPosts.map((post) => {
  const { words, minutes } = getReadingTime(post.rawContent);
  return { ...post, words, minutes };
});
---

<PageLayout>
  <PageMeta
    title={`Posts tagged "${tag}" | ${SITE_TITLE}`}
    description={`Blog posts tagged with ${tag}`}
    slot="meta"
  />
  <section slot="main">
    <div class="mb-8">
      <h1 class="text-4xl font-bold mb-2 text-primary-main">
        Posts tagged "{tag}"
      </h1>
      <p class="text-text-muted">
        <a href="/blog" class="hover:text-text-link">‚Üê Back to all posts</a>
      </p>
    </div>
    {
      postsWithMeta.length === 0 ? (
        <p class="text-text-muted">No posts found with this tag.</p>
      ) : (
        <ul class="space-y-6">
          {postsWithMeta.map((post) => (
            <BlogPostItem post={post} />
          ))}
        </ul>
      )
    }
  </section>
</PageLayout>
