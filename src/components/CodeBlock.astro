---
import { Prism } from "@astrojs/prism";

const { language, content, title } = Astro.props;
---

<div class="code-container relative">
  {
    title && title.trim() !== "" && (
      <div class="code-title">
        <span class="truncate pr-2">{title}</span>
        <div class="hidden sm:flex gap-2 flex-shrink-0">
          <button class="copy-path-btn" data-path={title}>
            Copy Path
          </button>
          <button class="copy-code-btn" data-content={content}>
            Copy Code
          </button>
        </div>
      </div>
    )
  }
  <div
    class={`relative ${title && title.trim() !== "" ? "rounded-t-none" : ""}`}
  >
    <Prism lang={language} code={content} />
    {
      (!title || title.trim() === "") && (
        <button
          class="copy-code-btn copy-code-btn-absolute"
          data-content={content}
        >
          Copy Code
        </button>
      )
    }
  </div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    const copyCodeButtons = document.querySelectorAll(".copy-code-btn");
    const copyPathButtons = document.querySelectorAll(".copy-path-btn");

    copyCodeButtons.forEach((button) => {
      button.addEventListener("click", async function () {
        const content = this.getAttribute("data-content");

        try {
          await navigator.clipboard.writeText(content);
          const originalText = this.textContent;
          this.textContent = "Copied!";

          setTimeout(() => {
            this.textContent = originalText;
          }, 1000);
        } catch (err) {
          console.error("Failed to copy code: ", err);
        }
      });
    });

    copyPathButtons.forEach((button) => {
      button.addEventListener("click", async function () {
        const path = this.getAttribute("data-path");

        try {
          await navigator.clipboard.writeText(path);
          const originalText = this.textContent;
          this.textContent = "Copied!";

          setTimeout(() => {
            this.textContent = originalText;
          }, 1000);
        } catch (err) {
          console.error("Failed to copy path: ", err);
        }
      });
    });
  });
</script>

<style>
  .code-title {
    background-color: rgb(var(--color-text-body) / 0.05);
    color: rgb(var(--color-text-body));
    padding: 0.5rem 1rem;
    font-size: 0.875rem;
    font-weight: 500;
    border-top-left-radius: 0.375rem;
    border-top-right-radius: 0.375rem;
    border-bottom: 1px solid rgb(var(--color-text-muted) / 0.2);
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .copy-path-btn,
  .copy-code-btn {
    padding: 0.25rem 0.5rem;
    font-size: 0.75rem;
    background-color: rgb(var(--color-primary-main) / 0.1);
    color: rgb(var(--color-primary-main));
    border: 1px solid rgb(var(--color-primary-main) / 0.2);
    border-radius: 0.25rem;
    transition: all 0.2s ease;
    cursor: pointer;
  }

  .copy-path-btn:hover,
  .copy-code-btn:hover {
    background-color: rgb(var(--color-primary-main) / 0.2);
    border-color: rgb(var(--color-primary-main) / 0.3);
  }

  .copy-code-btn-absolute {
    position: absolute;
    top: 0.5rem;
    right: 0.5rem;
  }
</style>

<style is:global>
  code[class*="language-"],
  pre[class*="language-"] {
    color: rgb(var(--color-text-body));
    background: none;
    font-family: Consolas, Monaco, "Andale Mono", "Ubuntu Mono", monospace;
    text-align: left;
    white-space: pre;
    word-spacing: normal;
    word-break: normal;
    word-wrap: normal;
    line-height: 1.5;
    -moz-tab-size: 4;
    -o-tab-size: 4;
    tab-size: 4;
    -webkit-hyphens: none;
    -moz-hyphens: none;
    -ms-hyphens: none;
    hyphens: none;
  }

  pre[class*="language-"]::-moz-selection,
  pre[class*="language-"] ::-moz-selection,
  code[class*="language-"]::-moz-selection,
  code[class*="language-"] ::-moz-selection {
    background: rgb(var(--color-text-muted) / 0.2);
  }

  pre[class*="language-"]::selection,
  pre[class*="language-"] ::selection,
  code[class*="language-"]::selection,
  code[class*="language-"] ::selection {
    background: rgb(var(--color-text-muted) / 0.2);
  }

  pre[class*="language-"] {
    padding: 1em;
    margin: 0.5em 0;
    overflow: auto;
    border-radius: 0.375rem;
  }

  .rounded-t-none pre[class*="language-"] {
    border-top-left-radius: 0;
    border-top-right-radius: 0;
    margin-top: 0;
  }

  :not(pre) > code[class*="language-"],
  pre[class*="language-"] {
    background: rgb(var(--color-text-body) / 0.03);
    border: 1px solid rgb(var(--color-text-muted) / 0.15);
  }

  html.dark pre[class*="language-"],
  html.dark :not(pre) > code[class*="language-"] {
    background: rgb(var(--color-text-body) / 0.05);
    border-color: rgb(var(--color-text-muted) / 0.2);
  }

  :not(pre) > code[class*="language-"] {
    padding: 0.1em 0.3em;
    border-radius: 0.3em;
    white-space: normal;
  }

  .token.comment,
  .token.prolog,
  .token.doctype,
  .token.cdata {
    color: rgb(var(--color-text-muted));
    font-style: italic;
  }

  .token.punctuation {
    color: rgb(var(--color-text-body) / 0.7);
  }

  .token.delimiter.important,
  .token.selector .parent,
  .token.tag,
  .token.tag .token.punctuation {
    color: rgb(var(--color-primary-main));
  }

  .token.attr-name,
  .token.boolean,
  .token.boolean.important,
  .token.number,
  .token.constant,
  .token.selector .token.attribute {
    color: rgb(var(--color-primary-main) / 0.8);
  }

  .token.class-name,
  .token.key,
  .token.parameter,
  .token.property,
  .token.property-access,
  .token.variable {
    color: rgb(var(--color-text-bold));
  }

  .token.attr-value,
  .token.inserted,
  .token.color,
  .token.selector .token.value,
  .token.string,
  .token.string .token.url-link {
    color: rgb(var(--color-primary-main) / 0.9);
  }

  .token.builtin,
  .token.keyword-array,
  .token.package,
  .token.regex {
    color: rgb(var(--color-text-link));
  }

  .token.function,
  .token.selector .token.class,
  .token.selector .token.id {
    color: rgb(var(--color-text-bold));
    font-weight: 500;
  }

  .token.atrule .token.rule,
  .token.combinator,
  .token.keyword,
  .token.operator,
  .token.pseudo-class,
  .token.pseudo-element,
  .token.selector,
  .token.unit {
    color: rgb(var(--color-primary-main));
    font-weight: 500;
  }

  .token.deleted,
  .token.important {
    color: rgb(var(--color-primary-main) / 0.7);
  }

  .token.keyword-this,
  .token.this {
    color: rgb(var(--color-text-bold));
  }

  .token.important,
  .token.keyword-this,
  .token.this,
  .token.bold {
    font-weight: bold;
  }

  .token.delimiter.important {
    font-weight: inherit;
  }

  .token.italic {
    font-style: italic;
  }

  .token.entity {
    cursor: help;
  }

  .language-markdown .token.title,
  .language-markdown .token.title .token.punctuation {
    color: rgb(var(--color-text-bold));
    font-weight: bold;
  }

  .language-markdown .token.blockquote.punctuation,
  .language-markdown .token.list.punctuation {
    color: rgb(var(--color-primary-main));
  }

  .language-markdown .token.code {
    color: rgb(var(--color-primary-main));
  }

  .language-markdown .token.hr.punctuation {
    color: rgb(var(--color-text-muted));
  }

  .language-markdown .token.url .token.content {
    color: rgb(var(--color-text-link));
  }

  .language-markdown .token.url-link {
    color: rgb(var(--color-primary-main) / 0.8);
  }

  .language-markdown .token.table-header {
    color: rgb(var(--color-text-bold));
  }

  .language-json .token.operator {
    color: rgb(var(--color-text-body));
  }

  .language-scss .token.variable {
    color: rgb(var(--color-primary-main));
  }

  .line-highlight.line-highlight {
    background: rgb(var(--color-primary-main) / 0.1);
  }

  .line-highlight.line-highlight:before,
  .line-highlight.line-highlight[data-end]:after {
    background-color: rgb(var(--color-primary-main));
    color: rgb(var(--color-bg-body));
  }

  .line-numbers.line-numbers .line-numbers-rows {
    border-right: 1px solid rgb(var(--color-text-muted) / 0.2);
    background: rgb(var(--color-text-body) / 0.03);
  }

  .line-numbers .line-numbers-rows > span:before {
    color: rgb(var(--color-text-muted));
  }

  pre[id].linkable-line-numbers.linkable-line-numbers
    span.line-numbers-rows
    > span:hover:before {
    background-color: rgb(var(--color-primary-main) / 0.1);
  }

  pre.diff-highlight > code .token.token.deleted:not(.prefix),
  pre > code.diff-highlight .token.token.deleted:not(.prefix) {
    background-color: rgb(var(--color-primary-main) / 0.1);
    text-decoration: line-through;
  }

  pre.diff-highlight > code .token.token.inserted:not(.prefix),
  pre > code.diff-highlight .token.token.inserted:not(.prefix) {
    background-color: rgb(var(--color-primary-main) / 0.15);
  }
</style>
